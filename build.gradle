import org.gradle.internal.os.OperatingSystem

plugins {
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.6'
    id "com.ullink.nuget" version "2.15"
}

allprojects {
    repositories {
        mavenCentral()
    }
}

if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = 'dev'
    }
}

def buildVersion =  project.hasProperty('buildVersion') ? project.buildVersion : '1.0.0'
def buildType = project.hasProperty('buildType') ? project.buildType : ''
def buildNumber = project.hasProperty('buildNumber') ? project.buildNumber : ''

apply from: "locations.gradle"

apply from: "properties.gradle"

apply from: "dependencies.gradle"

defineWpiUtilProperties()
defineHALProperties()
//defineNetworkTablesProperties()
defineCsCoreProperties()
defineCvProperties()

nugetSpec {
    nuspec = [
        metadata: [
            id: 'FRC.WPILibNativeLibraries',
            title: 'FRC WPILibNativeLibraries',
            authors: 'RobotDotNet',
            owners: 'RobotDotNet',
            description: 'Contains the roboRIO libraries to run WPILib in C#',
            tags: 'WPILib FIRST FRC RoboRIO',
            copyright: '2016-2017',
            projectUrl: 'https://github.com/robotdotnet/WPILib/WPILibNativeLibraries',
            version: buildVersion + buildType + buildNumber,
            contentFiles: [
                { files (include: '**/wpinative/*.*', buildAction: 'None', copyToOutput: 'true')}
            ],
        ],
        files: [
            { file (src: wpiUtilSharedLib, target: 'contentfiles\\any\\any\\wpinative') },
            { file (src: halSharedLib, target: 'contentfiles\\any\\any\\wpinative') },
            //{ file (src: netSharedLib, target: 'contentfiles\\any\\any\\wpinative') },
            { file (src: cscoreSharedLib, target: 'contentfiles\\any\\any\\wpinative') },
            { file (src: "${rootDir}/temp/cvsharp/build/libs/openCvSharpExtern/shared/libOpenCvSharpExtern.so", target: 'contentfiles\\any\\any\\wpinative') },
            { file (src: "${cvSharedLocation}/*.so.3.2".replace('/', '\\'), target: 'contentfiles\\any\\any\\wpinative') },
            { file (src: "${rootDir}/ImageSettings.json", target: 'contentfiles\\any\\any\\wpinative') },
            { file (src: wpiUtilSharedLib, target: 'content\\wpinative') },
            { file (src: halSharedLib, target: 'content\\wpinative') },
            //{ file (src: netSharedLib, target: 'content\\wpinative') },
            { file (src: cscoreSharedLib, target: 'content\\wpinative') },
            { file (src: "${rootDir}/temp/cvsharp/arm/build/libs/openCvSharpExtern/shared/libOpenCvSharpExtern.so", target: 'content\\wpinative') },
            { file (src: "${cvSharedLocation}/*.so.3.2".replace('/', '\\'), target: 'content\\wpinative') }
        ]
    ]
}

// Empty task for build so that zips will be
// built when running ./gradlew build
//task build

nugetPack.dependsOn unzipWpiUtil
nugetPack.dependsOn unzipHAL
//nugetPack.dependsOn unzipNetworkTables
nugetPack.dependsOn unzipCsCore
nugetPack.dependsOn unzipCv
build.dependsOn nugetPack

//apply from: "releases.gradle"

clean {
    delete buildDir
    delete releaseDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}
